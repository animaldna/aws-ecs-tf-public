version: 2.1

tagged_builds: &tagged_builds
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/
prod_env: &prod_env
  env: prod
  context:
    - org_global
    - catalog_api_prod
stage_env: &stage_env
  env: stage
  context:
    - org_global
    - catalog_api_stage


workflows:
  deploy_untagged:
    when:
      and:
        - equal: [cci-update, << pipeline.git.branch >>]
    jobs:
      - init_and_plan:
          <<: *prod_env
          # name: prod_init_plan  
      - apply:
          <<: *prod_env
          # name: prod_apply
          requires:
            # - prod_init_plan
            - init_and_plan

  deploy_tagged:
    jobs:
      - init_and_plan:
          name: stage_init_plan
          <<: *tagged_builds
          <<: *stage_env
      - apply:
          name: stage_apply
          <<: *tagged_builds
          <<: *stage_env
          requires:
            - stage_init_plan
      - hold_for_stage_review:
          <<: *tagged_builds
          type: approval
          requires:
            - stage_apply
      - init_and_plan:
          <<: *tagged_builds
          <<: *prod_env
          name: prod_init_plan
          requires:
            - hold_for_stage_review
      - hold_for_prod_review:
          <<: *tagged_builds
          type: approval
          requires:
            - prod_init_plan
      - apply:
          <<: *tagged_builds
          <<: *prod_env
          name: prod_apply
          requires:
            - hold_for_prod_review
      - destroy:
          <<: *tagged_builds
          <<: *stage_env
          name: destroy_stage
          requires:
            - hold_for_prod_review
        
jobs:
  init_and_plan:
    parameters:
      env:
        type: string
        default: dev
    working_directory: /tmp/terraform-infra
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            terraform init -input=false -backend-config="backends/<< parameters.env >>.s3.tfbackend"
            terraform plan -out="tf-plan-out" \
            -var="env=<< parameters.env >>" \
            -var="aws_region=${AWS_REGION}" \
            -var="aws_account_id=${AWS_ACCOUNT_ID}" \
            -var="safe_ips=${SAFE_IPS}" \
            -var="domain_name=${DOMAIN_NAME}" \
            -var="default_image=animaldna/sleep:latest"
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply:
    parameters:
      env:
        type: string
        default: dev
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            terraform apply -auto-approve \
            -var="env=<< parameters.env >>" \
            -var="aws_region=${AWS_REGION}" \
            -var="aws_account_id=${AWS_ACCOUNT_ID}" \
            -var="safe_ips=${SAFE_IPS}" \
            -var="domain_name=${DOMAIN_NAME}" \
            -var="default_image=animaldna/sleep:latest"
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    parameters:
      env:
        type: string
        default: dev
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            terraform destroy -auto-approve \
            -var="env=<< parameters.env >>" \
            -var="aws_region=${AWS_REGION}" \
            -var="aws_account_id=${AWS_ACCOUNT_ID}" \
            -var="safe_ips=${SAFE_IPS}" \
            -var="domain_name=${DOMAIN_NAME}" \
            -var="default_image=animaldna/sleep:latest"